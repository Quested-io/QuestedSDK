{"version":3,"file":"index.umd.min.js","sources":["../src/config/index.ts","../src/utils/Logger.service.ts","../src/utils/Bridge.service.ts","../src/api/Player.service.ts","../src/create.ts","../src/index.ts"],"sourcesContent":["const CONFIG_INJECT_KEY = Symbol('CONFIG_INJECT_KEY');\n\nexport { CONFIG_INJECT_KEY };\n","import { inject, injectable } from 'inversify';\nimport { LogLevel } from '../types/LogLevel';\nimport { CONFIG_INJECT_KEY } from '../config';\nimport { InitOptions } from '../types/InitOptions';\nimport { ILogger } from '../types/ILogger';\n\nconst logLevelOrder: Record<LogLevel, number> = {\n  debug: 0,\n  info: 1,\n  log: 2,\n  warn: 3,\n  error: 4,\n};\n\n@injectable()\nexport class LoggerService {\n  private readonly logLevel: LogLevel;\n  private logger: ILogger;\n\n  constructor(\n    @inject(CONFIG_INJECT_KEY)\n    private options: InitOptions,\n  ) {\n    this.logLevel = this.options.logLevel ?? 'log';\n    this.logger = this.options.logger ?? console;\n  }\n\n  debug(...args: any[]) {\n    if (logLevelOrder[this.logLevel] <= logLevelOrder.debug) {\n      this.logger.debug(...args);\n    }\n  }\n\n  info(...args: any[]) {\n    if (logLevelOrder[this.logLevel] <= logLevelOrder.info) {\n      this.logger.info(...args);\n    }\n  }\n\n  log(...args: any[]) {\n    if (logLevelOrder[this.logLevel] <= logLevelOrder.log) {\n      this.logger.log(...args);\n    }\n  }\n\n  warn(...args: any[]) {\n    if (logLevelOrder[this.logLevel] <= logLevelOrder.warn) {\n      this.logger.warn(...args);\n    }\n  }\n\n  error(...args: any[]) {\n    if (logLevelOrder[this.logLevel] <= logLevelOrder.error) {\n      this.logger.error(...args);\n    }\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { LoggerService } from './Logger.service';\n\n@injectable()\nexport class BridgeService {\n  private readonly TIMEOUT_MS = 5000;\n\n  constructor(\n    @inject(LoggerService)\n    private logger: LoggerService,\n  ) {}\n\n  async send(activityId: string, eventType: string, payload: any) {\n    this.logger.log(activityId, eventType, payload);\n    window.parent.postMessage(\n      {\n        type: eventType,\n        source: activityId,\n        payload: payload,\n      },\n      '*',\n    );\n  }\n\n  waitForReply(activityId: string, eventType: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const listener = (event: MessageEvent) => {\n        if (event.data.type === eventType && event.data.source === activityId) {\n          cleanup();\n          resolve(event.data.payload);\n        }\n      };\n\n      const timeout = setTimeout(() => {\n        cleanup();\n        reject(\n          new Error(\n            `Timeout waiting for reply to ${eventType} after ${this.TIMEOUT_MS}ms`,\n          ),\n        );\n      }, this.TIMEOUT_MS);\n\n      const cleanup = () => {\n        window.removeEventListener('message', listener);\n        clearTimeout(timeout);\n      };\n\n      window.addEventListener('message', listener);\n    });\n  }\n\n  async sendAndWaitForReply(\n    activityId: string,\n    eventType: string,\n    payload: any,\n  ): Promise<any> {\n    await this.send(activityId, eventType, payload);\n    return this.waitForReply(activityId, eventType);\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport type { ActivityEventType, PlayerApi } from '../types/api/Player.api';\nimport type { IProfile } from '../types/entities/IProfile';\nimport { BridgeService } from '../utils/Bridge.service';\nimport { CONFIG_INJECT_KEY } from '../config';\nimport type { InitOptions } from '../types/InitOptions';\nimport type {IList} from \"../types/entities/IList\";\n\n@injectable()\nexport class PlayerService implements PlayerApi {\n  constructor(\n    @inject(BridgeService)\n    private bridgeService: BridgeService,\n    @inject(CONFIG_INJECT_KEY)\n    private options: InitOptions,\n  ) {}\n\n  async me(): Promise<IProfile> {\n    return this.bridgeService.sendAndWaitForReply(\n      this.options.activityId,\n      'getProfile',\n      {},\n    );\n  }\n  async trackEvent(event: ActivityEventType, data: any): Promise<void> {\n    return this.bridgeService.send(this.options.activityId, event, data);\n  }\n  updateProfileSpecification(id: string, value: string): Promise<void> {\n    return this.bridgeService.send(\n      this.options.activityId,\n      'system:updateProfileSpecification',\n      { id, value },\n    );\n  }\n  getGameProperty(key: string): Promise<string> {\n    return this.bridgeService.sendAndWaitForReply(\n      this.options.activityId,\n      'system:getGameProperty',\n      { key },\n    );\n  }\n  setGameProperty(key: string, value: string): Promise<void> {\n    return this.bridgeService.send(\n      this.options.activityId,\n      'system:setGameProperty',\n      { key, value },\n    );\n  }\n  getAllLists(): Promise<IList[]> {\n    return this.bridgeService.sendAndWaitForReply(\n      this.options.activityId,\n      'system:getAllLists',\n      {},\n    );\n  }\n  removeFromList(listId: string, itemId: string): Promise<void> {\n    return this.bridgeService.send(\n      this.options.activityId,\n      'system:removeFromList',\n      { listId, itemId },\n    );\n  }\n  addToList(listId: string, itemId: string): Promise<void> {\n    return this.bridgeService.send(\n      this.options.activityId,\n      'system:addToList',\n      { listId, itemId },\n    );\n  }\n}\n","import { Container } from 'inversify';\nimport type {Instance} from './types/Instance';\nimport { PlayerService } from './api/Player.service';\nimport type {InitOptions} from './types/InitOptions';\nimport { CONFIG_INJECT_KEY } from './config';\nimport { LoggerService } from './utils/Logger.service';\nimport type {OnInstanceInit} from './types/OnInstanceInit';\n\nconst Components: any[] = [\n  PlayerService,\n  LoggerService,\n];\n\nexport const create = (options: InitOptions): Instance => {\n  let isInitialized = false;\n\n  const container = new Container();\n  container.bind(CONFIG_INJECT_KEY).toConstantValue(options);\n\n  for (const provider of Components) {\n    container.bind(provider).toSelf().inSingletonScope();\n  }\n  handleInstanceInitForComponent(container, Components).then(() => {\n    options.onReady?.();\n    isInitialized = true;\n  });\n  return {\n    _container: container,\n    api: {\n      player: container.get(PlayerService),\n    },\n    isInitialized: () => isInitialized,\n  };\n};\n\nconst handleInstanceInitForComponent = async (\n  container: Container,\n  components: any[],\n) => {\n  for (const provider of components) {\n    const component = container.get<OnInstanceInit>(provider);\n    if (component.onInstanceInit) {\n      await component.onInstanceInit();\n    }\n  }\n};\n","import 'reflect-metadata';\nimport { create } from './create';\nimport type {Instance} from './types/Instance';\nimport type {InitOptions} from './types/InitOptions';\nimport {\n  ActivityEventData,\n  ActivityEventType,\n  MatchEndedEventData,\n  RouteChangedEventData,\n} from './types/api/Player.api';\n\nlet instance: Instance;\n\nconst init = (options: InitOptions) => {\n  instance = create(options);\n};\n\nexport { init, create, instance };\nexport type {Instance, InitOptions, ActivityEventType, ActivityEventData, MatchEndedEventData, RouteChangedEventData};"],"names":["CONFIG_INJECT_KEY","Symbol","logLevelOrder","debug","info","log","warn","error","LoggerService","constructor","options","this","logLevel","_a","logger","_b","console","args","__decorate","injectable","__param","inject","BridgeService","TIMEOUT_MS","send","activityId","eventType","payload","window","parent","postMessage","type","source","waitForReply","Promise","resolve","reject","listener","event","data","cleanup","timeout","setTimeout","Error","removeEventListener","clearTimeout","addEventListener","sendAndWaitForReply","PlayerService","bridgeService","me","trackEvent","updateProfileSpecification","id","value","getGameProperty","key","setGameProperty","getAllLists","removeFromList","listId","itemId","addToList","Object","Components","create","isInitialized","container","Container","bind","toConstantValue","provider","toSelf","inSingletonScope","handleInstanceInitForComponent","then","onReady","call","_container","api","player","get","components","__awaiter","component","onInstanceInit","exports","instance"],"mappings":"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"}