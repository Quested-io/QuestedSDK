/*!
 * @quested/sdk v0.1.6
 * (c) Yevhenii Rachkovan
 * Released under the MIT License.
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("reflect-metadata"),require("inversify")):"function"==typeof define&&define.amd?define(["exports","reflect-metadata","inversify"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).QuestedSDK={},null,e.inversify)}(this,(function(e,t,i){"use strict";function o(e,t,i,o){var n,r=arguments.length,s=r<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,o);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(r<3?n(s):r>3?n(t,i,s):n(t,i))||s);return r>3&&s&&Object.defineProperty(t,i,s),s}function n(e,t){return function(i,o){t(i,o,e)}}function r(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function s(e,t,i,o){return new(i||(i=Promise))((function(n,r){function s(e){try{c(o.next(e))}catch(e){r(e)}}function a(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,a)}c((o=o.apply(e,t||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;const a=Symbol("CONFIG_INJECT_KEY"),c={debug:0,info:1,log:2,warn:3,error:4};let d=class{constructor(e){var t,i;this.options=e,this.logLevel=null!==(t=this.options.logLevel)&&void 0!==t?t:"log",this.logger=null!==(i=this.options.logger)&&void 0!==i?i:console}debug(...e){c[this.logLevel]<=c.debug&&this.logger.debug(...e)}info(...e){c[this.logLevel]<=c.info&&this.logger.info(...e)}log(...e){c[this.logLevel]<=c.log&&this.logger.log(...e)}warn(...e){c[this.logLevel]<=c.warn&&this.logger.warn(...e)}error(...e){c[this.logLevel]<=c.error&&this.logger.error(...e)}};d=o([i.injectable(),n(0,i.inject(a)),r("design:paramtypes",[Object])],d);let l=class{constructor(e){this.logger=e,this.TIMEOUT_MS=5e3}send(e,t,i){return s(this,void 0,void 0,(function*(){this.logger.log(e,t,i),window.parent.postMessage({type:t,source:e,payload:i},"*")}))}waitForReply(e,t){return new Promise(((i,o)=>{const n=o=>{o.data.type===t&&o.data.source===e&&(s(),i(o.data.payload))},r=setTimeout((()=>{s(),o(new Error(`Timeout waiting for reply to ${t} after ${this.TIMEOUT_MS}ms`))}),this.TIMEOUT_MS),s=()=>{window.removeEventListener("message",n),clearTimeout(r)};window.addEventListener("message",n)}))}sendAndWaitForReply(e,t,i){return s(this,void 0,void 0,(function*(){return yield this.send(e,t,i),this.waitForReply(e,t)}))}};l=o([i.injectable(),n(0,i.inject(d)),r("design:paramtypes",[d])],l);let u=class{constructor(e,t){this.bridgeService=e,this.options=t}me(){return s(this,void 0,void 0,(function*(){return this.bridgeService.sendAndWaitForReply(this.options.activityId,"getProfile",{})}))}trackEvent(e,t){return s(this,void 0,void 0,(function*(){return this.bridgeService.send(this.options.activityId,e,t)}))}updateProfileSpecification(e,t){return this.bridgeService.send(this.options.activityId,"system:updateProfileSpecification",{id:e,value:t})}getGameProperty(e){return this.bridgeService.sendAndWaitForReply(this.options.activityId,"system:getGameProperty",{key:e})}setGameProperty(e,t){return this.bridgeService.send(this.options.activityId,"system:setGameProperty",{key:e,value:t})}getAllLists(){return this.bridgeService.sendAndWaitForReply(this.options.activityId,"system:getAllLists",{})}removeFromList(e,t){return this.bridgeService.send(this.options.activityId,"system:removeFromList",{listId:e,itemId:t})}addToList(e,t){return this.bridgeService.send(this.options.activityId,"system:addToList",{listId:e,itemId:t})}};u=o([i.injectable(),n(0,i.inject(l)),n(1,i.inject(a)),r("design:paramtypes",[l,Object])],u);const f=[u,d,l],g=e=>{let t=!1;const o=new i.Container;o.bind(a).toConstantValue(e);for(const e of f)o.bind(e).toSelf().inSingletonScope();return p(o,f).then((()=>{var i;null===(i=e.onReady)||void 0===i||i.call(e),t=!0})),{_container:o,api:{player:o.get(u)},isInitialized:()=>t}},p=(e,t)=>s(void 0,void 0,void 0,(function*(){for(const i of t){const t=e.get(i);t.onInstanceInit&&(yield t.onInstanceInit())}}));e.instance=void 0;e.create=g,e.init=t=>{e.instance=g(t)}}));
//# sourceMappingURL=index.umd.min.js.map
