{"version":3,"file":"index.js","sources":["../src/config/index.ts","../src/utils/Logger.service.ts","../src/utils/Bridge.service.ts","../src/api/Player.service.ts","../src/create.ts","../src/index.ts"],"sourcesContent":["const CONFIG_INJECT_KEY = Symbol('CONFIG_INJECT_KEY');\n\nexport { CONFIG_INJECT_KEY };\n","import { inject, injectable } from 'inversify';\nimport { LogLevel } from '../types/LogLevel';\nimport { CONFIG_INJECT_KEY } from '../config';\nimport { InitOptions } from '../types/InitOptions';\nimport { ILogger } from '../types/ILogger';\n\nconst logLevelOrder: Record<LogLevel, number> = {\n  debug: 0,\n  info: 1,\n  log: 2,\n  warn: 3,\n  error: 4,\n};\n\n@injectable()\nexport class LoggerService {\n  private readonly logLevel: LogLevel;\n  private logger: ILogger;\n\n  constructor(\n    @inject(CONFIG_INJECT_KEY)\n    private options: InitOptions,\n  ) {\n    this.logLevel = this.options.logLevel ?? 'log';\n    this.logger = this.options.logger ?? console;\n  }\n\n  debug(...args: any[]) {\n    if (logLevelOrder[this.logLevel] <= logLevelOrder.debug) {\n      this.logger.debug(...args);\n    }\n  }\n\n  info(...args: any[]) {\n    if (logLevelOrder[this.logLevel] <= logLevelOrder.info) {\n      this.logger.info(...args);\n    }\n  }\n\n  log(...args: any[]) {\n    if (logLevelOrder[this.logLevel] <= logLevelOrder.log) {\n      this.logger.log(...args);\n    }\n  }\n\n  warn(...args: any[]) {\n    if (logLevelOrder[this.logLevel] <= logLevelOrder.warn) {\n      this.logger.warn(...args);\n    }\n  }\n\n  error(...args: any[]) {\n    if (logLevelOrder[this.logLevel] <= logLevelOrder.error) {\n      this.logger.error(...args);\n    }\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport { LoggerService } from './Logger.service';\n\n@injectable()\nexport class BridgeService {\n  private readonly TIMEOUT_MS = 5000;\n\n  constructor(\n    @inject(LoggerService)\n    private logger: LoggerService,\n  ) {}\n\n  async send(activityId: string, eventType: string, payload: any) {\n    this.logger.log(activityId, eventType, payload);\n    window.parent.postMessage(\n      {\n        type: eventType,\n        source: activityId,\n        payload: payload,\n      },\n      '*',\n    );\n  }\n\n  waitForReply(activityId: string, eventType: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const listener = (event: MessageEvent) => {\n        if (event.data.type === eventType && event.data.source === activityId) {\n          cleanup();\n          resolve(event.data.payload);\n        }\n      };\n\n      const timeout = setTimeout(() => {\n        cleanup();\n        reject(\n          new Error(\n            `Timeout waiting for reply to ${eventType} after ${this.TIMEOUT_MS}ms`,\n          ),\n        );\n      }, this.TIMEOUT_MS);\n\n      const cleanup = () => {\n        window.removeEventListener('message', listener);\n        clearTimeout(timeout);\n      };\n\n      window.addEventListener('message', listener);\n    });\n  }\n\n  async sendAndWaitForReply(\n    activityId: string,\n    eventType: string,\n    payload: any,\n  ): Promise<any> {\n    await this.send(activityId, eventType, payload);\n    return this.waitForReply(activityId, eventType);\n  }\n}\n","import { inject, injectable } from 'inversify';\nimport type { ActivityEventType, PlayerApi } from '../types/api/Player.api';\nimport type { IProfile } from '../types/entities/IProfile';\nimport { BridgeService } from '../utils/Bridge.service';\nimport { CONFIG_INJECT_KEY } from '../config';\nimport type { InitOptions } from '../types/InitOptions';\nimport type {IList} from \"../types/entities/IList\";\n\n@injectable()\nexport class PlayerService implements PlayerApi {\n  constructor(\n    @inject(BridgeService)\n    private bridgeService: BridgeService,\n    @inject(CONFIG_INJECT_KEY)\n    private options: InitOptions,\n  ) {}\n\n  async me(): Promise<IProfile> {\n    return this.bridgeService.sendAndWaitForReply(\n      this.options.activityId,\n      'getProfile',\n      {},\n    );\n  }\n  async trackEvent(event: ActivityEventType, data: any): Promise<void> {\n    return this.bridgeService.send(this.options.activityId, event, data);\n  }\n  updateProfileSpecification(id: string, value: string): Promise<void> {\n    return this.bridgeService.send(\n      this.options.activityId,\n      'system:updateProfileSpecification',\n      { id, value },\n    );\n  }\n  getGameProperty(key: string): Promise<string> {\n    return this.bridgeService.sendAndWaitForReply(\n      this.options.activityId,\n      'system:getGameProperty',\n      { key },\n    );\n  }\n  setGameProperty(key: string, value: string): Promise<void> {\n    return this.bridgeService.send(\n      this.options.activityId,\n      'system:setGameProperty',\n      { key, value },\n    );\n  }\n  getAllLists(): Promise<IList[]> {\n    return this.bridgeService.sendAndWaitForReply(\n      this.options.activityId,\n      'system:getAllLists',\n      {},\n    );\n  }\n  removeFromList(listId: string, itemId: string): Promise<void> {\n    return this.bridgeService.send(\n      this.options.activityId,\n      'system:removeFromList',\n      { listId, itemId },\n    );\n  }\n  addToList(listId: string, itemId: string): Promise<void> {\n    return this.bridgeService.send(\n      this.options.activityId,\n      'system:addToList',\n      { listId, itemId },\n    );\n  }\n}\n","import { Container } from 'inversify';\nimport type { Instance } from './types/Instance';\nimport { PlayerService } from './api/Player.service';\nimport type { InitOptions } from './types/InitOptions';\nimport { CONFIG_INJECT_KEY } from './config';\nimport { LoggerService } from './utils/Logger.service';\nimport type { OnInstanceInit } from './types/OnInstanceInit';\nimport { BridgeService } from './utils/Bridge.service';\n\nconst Components: any[] = [PlayerService, LoggerService, BridgeService];\n\nexport const create = (options: InitOptions): Instance => {\n  let isInitialized = false;\n\n  const container = new Container();\n  container.bind(CONFIG_INJECT_KEY).toConstantValue(options);\n\n  for (const provider of Components) {\n    container.bind(provider).toSelf().inSingletonScope();\n  }\n  handleInstanceInitForComponent(container, Components).then(() => {\n    options.onReady?.();\n    isInitialized = true;\n  });\n  return {\n    _container: container,\n    api: {\n      player: container.get(PlayerService),\n    },\n    isInitialized: () => isInitialized,\n  };\n};\n\nconst handleInstanceInitForComponent = async (\n  container: Container,\n  components: any[],\n) => {\n  for (const provider of components) {\n    const component = container.get<OnInstanceInit>(provider);\n    if (component.onInstanceInit) {\n      await component.onInstanceInit();\n    }\n  }\n};\n","import 'reflect-metadata';\nimport { create } from './create';\nimport type { Instance } from './types/Instance';\nimport type { InitOptions } from './types/InitOptions';\nimport {\n  ActivityEventData,\n  ActivityEventType,\n  ActivityEndedEventData,\n  ConfigChangedEventData,\n  ActivityBridgeEvent,\n} from './types/api/Player.api';\n\nlet instance: Instance;\n\nconst init = (options: InitOptions) => {\n  instance = create(options);\n};\n\nexport { init, create, instance };\nexport type {\n  Instance,\n  InitOptions,\n  ActivityEventType,\n  ActivityEventData,\n  ActivityEndedEventData,\n  ConfigChangedEventData,\n  ActivityBridgeEvent,\n};\n"],"names":["injectable","inject","Container","instance"],"mappings":"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"}